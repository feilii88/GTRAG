user nginx;
worker_processes 1;  

# Essential events block  
events {  
    worker_connections 1024;  
}  

http {
    server {  
        listen 80;  
        server_name gtrag.bot;  
        return 301 https://$host$request_uri;  # Redirect all HTTP to HTTPS  
    }  

    server {  
        listen 443 ssl;  
        server_name gtrag.bot;  

        ssl_certificate /etc/letsencrypt/live/gtrag.bot/fullchain.pem;  
        ssl_certificate_key /etc/letsencrypt/live/gtrag.bot/privkey.pem;  
        ssl_protocols TLSv1.2 TLSv1.3;  
        ssl_prefer_server_ciphers on;  

        client_max_body_size 100M;

        location / {  
            proxy_pass http://frontend:3000;  # Proxy to frontend  
            proxy_set_header Host $host;  
            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
            proxy_set_header X-Forwarded-Proto $scheme;  
        }  

        location /backend/ {  
            proxy_pass http://backend:8000;  # Proxy to backend API  
            proxy_set_header Host $host;  
            proxy_set_header X-Real-IP $remote_addr;  
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  
            proxy_set_header X-Forwarded-Proto $scheme;  

            # WebSocket support
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }  
    }  
}
# stream {  
#     upstream pgsql {  
#         server db:5432;  # The name of the PostgreSQL service in Docker Compose  
#     }  

#     server {  
#         listen 5432;  
#         proxy_pass pgsql;  
#     }  
# }  